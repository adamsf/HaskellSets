1. Write a function which given a list of values builds a list of tuples with each value matched to a number from 1 to n.
   ex: numberedList ["Dishes", "Vaccuum", "Mow", "Lunch"] -> [(1, Dishes), (2, Vaccuum), (3, Mow), (4, Lunch)]

	numList as = zip [1..] as

2. Write a function that given a list of items generates a list of all possible matchups of those items, but never matched up to themselves.
   ex: matchUps "ABCD" -> [(A,B), (A,C), (A,D), (B,A), (B,C), (B,D), (C,A), (C,B), (C,D), (D,A), (D,B), (D,C)]

	matchVals as = [(x,y) | x <- as, y <- as, x /= y]

3. Write a function which given two lists pairs up the corresponding first list with the second list's backwards location.
   ex: reversePair "COW" "CAT" -> [(C,T), (O,A), (W,C)]

	matchLists as bs = zip as (reverse bs)

4. Given a list of tuples which contain (X,Y) coordinates and a value r, return only the tuples where the coordinates are within a distance of r from the original (the distance formula is really easy when comparing to the origin).
   ex: circleKeeper [(3,2), (4,8), (2,2)] 5 = [(3,2), (2,2)]

	inDistance as r = [p | p <- as, (fst p)^2 + (snd p)^2 <= r^2] 

5. Write a function which takes no parameter in but calculates a list of all tuples pairing up each uppercase letter to its ASCII value. 
   Let Haskell figure out the ASCII value, don't make them up yourself. To do so, import Data.Char which gives you access to a function called ord,
   which will tell you what ASCII value that symbol is.  ie: ord 'A' = 65
   ex: asciiChart [('A', 65), ('B', 66), ... ('Z', ?)]

	asciiVal = zip ['A'..'Z'] [ord 'A'..]

6. Given a list of triple tuples, return back only the tuples which are colors.  A color tuple would have to have each of its three values
   be between 0 and 255 inclusive. A helper function would be nice.
   ex: colorKeeper [(200,50,5), (200,200,500), (0,-1,0), (0,0,58), (200,255,255), (255,0,0)] -> [(200,50,5), (0,0,58), (200,255,255), (255,0,0)]

	col a = a < 256 && a >= 0

	isColor (r, g, b) = col r && col g && col b 

	allColors as = [a | a <- as, isColor a ]

7. Write a function that given a list of tuples returns a list of just the second part of the tuple. 
   ex: seconds [(3,2), (4,8), (2,2)] -> [2, 8, 2]

	allSnds as = map snd as

8. Write a function that given a list of tuples reverses the first and second element of each of the tuples.
   ex: tupleReverse [(3,2), (4,8), (2,2)] -> [(2,3), (8,4), (2,2)]

	reverseTuples as = [(a, b) | (b, a) <- as]

9. Write a function that given a list of triple tuples returns a list of tuples with just the first and last part remaining.
   ex: firstLast [(200,50,5), (200,200,500), (0,-1,0), (0,0,58), (200,255,255), (255,0,0)] -> 
   [(200,5), (200,500), (0,0), (0,58), (200,255), (255,0)]

	fstLst as = [(a, c) | (a,_,c) <- as]

10. Write a function which given a string will return a hascode of that string computed by summing 
    each ascii value in the string multiplied by 31^(n-i+1) value, where n is the length of the string and i is the slot number. 
    ex: hashCode "dog" -> 'd' * 31 ^ 2 + 'o' * 31 ^ 1 + 'g' * 31 ^ 0

	hashCode ss = sum [ ord x * 31^(length ss - i + 1 ) | (x, i) <- zip ss [0..]]




