1) Finish the following list comprehension using a let binding:

   fromOrigin :: (RealFloat a) => (a, a) -> [a]
   fromOrigin points = [ distance | ??????? ]

	fromOrigin :: (RealFloat a) => [(a, a)] -> [a]

	fromOrigin pts = [ distance | (a,b) <- pts, let distance = sqrt (a^2 + b^2) ]
   
The function should take a list of tuples and generate  the distance from the origin the tuple is and store those  in a list.

2) Finish the following list comprehension using  a let binding:
   
   closeEnough :: (RealFloat a) => (a, a) -> a -> [((a, a), a)]
   closeEnough points d = ???

	closeEnough :: (RealFloat a) => [(a, a)] -> a -> [((a, a), a)]

	closeEnough pts d = [((x,y), d') | (x,y) <- pts, let d' = sqrt(x^2 + y^2), d' < d]

The function should take a list of tuples, calculate the distance they are from the origin, and keep only the tuples whose distance are less than d.  
The final result should be a tuple, with the first part of the tuple being the point itself and the second part of the tuple being the distance calculated.   

3) Use a case expression to write a function which given a string returns "(a/an) ___". We will pretend every word starting with a "aeiou" are 'an' words.

   Ex: article apple -> "an apple"
       article pear -> "a pear"

	article :: [Char] -> String

	article as = (case (toLower (head as)) of 'a' -> "an "
                                                
						  'e' -> "an "
                                                
						  'i' -> "an "
                                                
				        	  'o' -> "an "
                                                
						  'u' -> "an "
                                                
						  _->"a ") ++ as 
	
4) Use a case expression to write a function which given an integer and a string returns "You have (a/#) ___(no s or s)". We will pretend adding an s works for pluralazing all words.

   Ex: haveNum 1 watermelon -> "You have a watermelon."
       haveNum 2 apple -> "You have 2 apples."

	haveNum :: Int -> String -> String
	
haveNum a s = "You have " ++ (case a of 1 -> article s
                                        
						_ -> (show a) ++ " " ++ s ++ "s" )

5) Use a case expression to write a function which given a letter grade writes "You earned a __ GPA."
   A/a = 4.0, B/b = 3.0, C/c = 2.0, D/d = 1.0, F/f = 0.0

	gpa :: Char -> String

	gpa c = "You earned a " ++ (case (toLower c) of 'a' -> "4.0"
                                                
							'b' -> "3.0"
                                                
							'c' -> "2.0"
                                                
							'd' -> "1.0"
                                                
   							_   -> "0.0") ++ " GPA."

6) Write a recursive function which calculates the factorial of any number.

	factorial :: Integer -> Integer
	
factorial n  
          
		  | n <= 1 = 1 
          
		  | otherwise = n * factorial (n - 1)

7) Write a recursive function which calculates a^n.

	power :: Integer -> Integer
	
power a 0 = 1
	
power a 1 = a
	
power a n = a * (power a (n-1)) 

8) Write a recursive function that calculates any value in the Fibonacci sequence (0->0, 1->1, 2->1, 3->2, 4->3, ...)

	fib :: Integer -> Integer -> Integer

	fib 1 = 1

	fib 2 = 1 

	fib n = fib (n-1) + fib (n-2)

9) Write a recursive function that given a list builds the list backwards.

	backList :: [a] -> [a]
	
backList [] = []

	backList [a] = [a]

	backList as = last as:(backList (init as)) 